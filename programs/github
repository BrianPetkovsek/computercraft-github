local github = dofile("apis/github")

local action = select(1, ...)

local usage = "Usage: github clone <user>/<repo> [-b <branchname> | -t <tagname>] [-a <username>:<password>] [<destination>]"

-- make a bar of the form "[====>    ] 50%"
function progressbar(f)
	local left = "["
	local right = ("]%3d%%"):format(f * 100)

	local gap = select(1, term.getSize()) - #left - #right
	local at = math.floor(f * (gap + 1))
	for i = 1, gap do
		left = left .. (
			i < at and "=" or
			i > at and " " or
			           ">"
		)
	end
	return left .. right
end

-- get flag arguments
local acceptedFlags = {
	['-b'] = 'branch',
	['--branch'] = 'branch',
	['-t'] = 'tag',
	['--tag'] = 'tag',
	['-a'] = 'auth',
	['--auth'] = 'auth'
}

local findFlag = function(arg) return acceptedFlags[arg] end

local passed = {...}
local args = {}
local flags = {}
local flagValue = ''
for k, arg in pairs(passed) do
	local flagName = findFlag(arg)
	if flagName then
		flags[flagName] = passed[k + 1]
		flagValue = flags[flagName]
	elseif arg ~= action and arg ~= flagValue then
		table.insert(args, arg)
	end
end

if flags.branch and flags.tag then
	return printError('--branch and --tag cannot both be specified')
end

if action == 'clone' then
	-- parse input
	local repo, dest = args[1], args[2]
	local treeName = flags.branch or flags.tag or 'master'

	if flags.auth then
		local authUser, authPass = flags.auth:match('([^:]+):([^:]+)')
		if not authUser or not authPass then
			return printError('Invalid username password - should be username:password')
		else
			github.basicAuth(authUser,authPass)
		end
	end

	if not repo then return printError("No repo specified") end

	user, repo = repo:match('^(.-)/(.+)$')
	if not (user and repo) then return printError("Invalid repo name - should be user/repo") end

	dest = shell.resolve(dest or repo)

	-- get file listings
	local repo = github.repo(user, repo)
	print("Discovering files...")
	local tree = repo:tree(treeName)

	-- download the files
	print("Downloading:")
	local totalSize = tree.size
	local size = 0
	tree:cloneTo(dest, function(item)
		-- called every time a download completes
		if getmetatable(item) == github.Blob then
			size = size + item.size
			term.clearLine()
			print("  "..item:fullPath())
			term.write(progressbar(size/totalSize))
			term.setCursorPos(1, select(2, term.getCursorPos()))
		end
	end)
	term.scroll(1)
	return
end
print(usage)
